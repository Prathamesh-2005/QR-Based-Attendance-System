/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result; 
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import dao.connectionprovider;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.BorderFactory;
import javax.swing.Timer;
import utility.BDutility;
import java.sql.*;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
 


/**
 *
 * @author venne
 */
public class MarkingAttendance extends javax.swing.JFrame implements Runnable, ThreadFactory {

    /**
     * Creates new form MarkingAttendance
     */
    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;

    public MarkingAttendance() {
        initComponents();
        fixWebcamPosition();
        BDutility.setImage(this, "images/blackb.jpg", 1366, 768);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.white));
        Timer timer = new Timer(1, e -> updateTime());
        timer.start();
        initWebcam();
    }

    private void updateTime() {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        lbltime.setText(simpleDateFormat.format(new Date()));

    }private void fixWebcamPosition() {
    // Remove the panel from the layout entirely
    getContentPane().remove(webCamPanel);
    
    // Reset layout to absolute positioning
    getContentPane().setLayout(null);
    
    // Add the panel back with specific coordinates
    webCamPanel.setBounds(39, 21, 689, 518);
    getContentPane().add(webCamPanel);
    
    // Refresh the UI
    revalidate();
    repaint();
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        lblimage = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblCheckInCheckOut = new javax.swing.JLabel();
        lbltime = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        webCamPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setUndecorated(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Mark Attendance");

        exit.setText("x");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Time");

        lblCheckInCheckOut.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCheckInCheckOut.setForeground(new java.awt.Color(255, 255, 255));

        lbltime.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbltime.setForeground(new java.awt.Color(255, 255, 255));
        lbltime.setText("Time");

        lblname.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblname.setForeground(new java.awt.Color(255, 255, 255));

        webCamPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbltime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(71, 71, 71)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 872, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(135, 135, 135))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblname, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckInCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(175, 175, 175))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(526, 526, 526)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exit)
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 684, Short.MAX_VALUE)
                        .addComponent(webCamPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(exit))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(39, 39, 39)
                        .addComponent(lbltime, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblimage, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(lblname, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addComponent(lblCheckInCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        running = false;
        stopWebcam();
        if (executor != null && !executor.isShutdown()) {
            executor.shutdown();
        }
        dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkingAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkingAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkingAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkingAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkingAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblCheckInCheckOut;
    private javax.swing.JLabel lblimage;
    private javax.swing.JLabel lblname;
    private javax.swing.JLabel lbltime;
    private javax.swing.JPanel webCamPanel;
    // End of variables declaration//GEN-END:variables
  Map<String, String> resultMap = new HashMap<String, String>();

    @Override

public void run() {
    do {
        try {
            Thread.sleep(1000);
        } catch (InterruptedException ex) {
            // Handle exception
        }
        
        try {
            Result result = null;
            BufferedImage image = null;
            
            if (webcam != null && webcam.isOpen()) {  // Added webcam null check
                image = webcam.getImage();
                
                // Only proceed if we have a valid image
                if (image != null) {
                    LuminanceSource source = new BufferedImageLuminanceSource(image);
                    BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
                    
                    try {
                        result = new MultiFormatReader().decode(bitmap);
                    } catch (NotFoundException ex) {
                        // No QR code found - this is normal, continue
                    }

                    if (result != null) {
                        String jsonString = result.getText();
                        Gson gson = new Gson();
                        java.lang.reflect.Type type = new TypeToken<Map<String, String>>() {}.getType();
                        resultMap = gson.fromJson(jsonString, type);

                        String finalPath = BDutility.getPath("images\\" + resultMap.get("email") + ".jpg");
                        CircularImageFrame(finalPath);
                    }
                }
                // Skip processing if image is null
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } while (running);
}

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;

    }

    private void initWebcam() {
        webcam = Webcam.getDefault();
        if (webcam != null) {
            Dimension[] resolutions = webcam.getViewSizes();
            Dimension maxResolution = resolutions[resolutions.length - 1];
            if (webcam.isOpen()) {
                webcam.close();
            }
            webcam.setViewSize(maxResolution);
            webcam.open();
            panel = new WebcamPanel(webcam);
            panel.setPreferredSize(maxResolution);
            panel.setFPSDisplayed(true);

            webCamPanel.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 689, 518));
            executor.execute(this);
            executor.shutdown();
        } else {
            System.out.println("Issue with webcam.");
        }
    }

    private void stopWebcam() {
        if (webcam != null && webcam.isOpen()) {
            webcam.close();
        }
    }
    private BufferedImage imagee = null;

    private void CircularImageFrame(String imagePath) {
        try {
            Connection con = connectionprovider.getcon();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("select * from userdetails where email='" + resultMap.get("email") + "';");
            if (!rs.next()) {
                showPopUpForCertainDuration("User is not Registered or Deleted", "Invalid Qr", JOptionPane.ERROR_MESSAGE);
                return;
            }
            imagee = null;
            File imageFile = new File(imagePath);
            if (imageFile.exists()) {
                try {
                    imagee = ImageIO.read(new File(imagePath));
                    imagee = createCircularImage(imagee);
                    ImageIcon icon = new ImageIcon(imagee);
                    lblimage.setIcon(icon);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            } else {
                BufferedImage imageeee = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = imageeee.createGraphics();
                g2d.setColor(Color.BLACK);
                g2d.fillOval(25, 25, 250, 250);
                g2d.setFont(new Font("Serif", Font.BOLD, 250));
                g2d.setColor(Color.WHITE);
                g2d.drawString(String.valueOf(resultMap.get("name").charAt(0)).toUpperCase(), 75, 225);
                g2d.dispose();
                ImageIcon imageIconn = new ImageIcon(imageeee);
                lblimage.setIcon(imageIconn);
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.pack();
                this.setLocationRelativeTo(null);
                this.setVisible(true);
            }
            lblname.setHorizontalAlignment(JLabel.CENTER);
            lblname.setText(resultMap.get("name"));
            if (!checkInCheckout()) {
                return;
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showPopUpForCertainDuration(String popUpMessage, String popUpHeader, Integer iconId) throws HeadlessException {
        final JOptionPane optionPane = new JOptionPane(popUpMessage, iconId);
        final JDialog dialog = optionPane.createDialog(popUpHeader);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.dispose();
                clearUserDetails();
            }

        });
        timer.setRepeats(false);
        timer.start();
        dialog.setVisible(true);
    }

    private void clearUserDetails() {
        lblCheckInCheckOut.setText("");
        lblCheckInCheckOut.setBackground(null);
        lblCheckInCheckOut.setForeground(null);
        lblCheckInCheckOut.setOpaque(false);
        lblname.setText("");
        lblimage.setIcon(null);
    }

    private BufferedImage createCircularImage(BufferedImage image) {
        int diameter = 285;
        BufferedImage resizedImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(image, 0, 0, diameter, diameter, null);
        g2.dispose();
        BufferedImage circularImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        g2 = circularImage.createGraphics();
        Ellipse2D.Double circle = new Ellipse2D.Double(0, 0, diameter, diameter);
        g2.setClip(circle);
        g2.drawImage(resizedImage, 0, 0, null);
        g2.dispose();
        return circularImage;
    }

 private boolean checkInCheckout() throws SQLException {
    String popUpHeader = null;
    String popUpMessage = null;
    Color color = null;
    
    // For testing: Log the current time and status
    LocalDateTime currentDateTime = LocalDateTime.now();
    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    String currentDate = currentDateTime.format(dateFormatter);
    
    // Get current session name based on time
    String sessionName = getSessionName(currentDateTime);
    
    System.out.println("TEST: Current time: " + currentDateTime.format(dateTimeFormatter));
    System.out.println("TEST: Current date: " + currentDate);
    System.out.println("TEST: Current class period: " + getClassPeriodLabel(currentDateTime));
    System.out.println("TEST: Current session: " + sessionName);
    
    Connection con = null;
    try {
        con = connectionprovider.getcon();
        
        // First check if there's an active check-in (without checkout) for this user
        String activeCheckInQuery = "SELECT * FROM userattendance WHERE userid=? AND checkout IS NULL ORDER BY checkin DESC LIMIT 1";
        PreparedStatement activeCheckStmt = con.prepareStatement(activeCheckInQuery);
        activeCheckStmt.setInt(1, Integer.valueOf(resultMap.get("id")));
        ResultSet activeRs = activeCheckStmt.executeQuery();
        
        // If there's an active check-in (without checkout), process checkout logic
        if (activeRs.next()) {
            String checkInDateTime = activeRs.getString("checkin");
            String sessionNameFromDb = activeRs.getString("session_name");
            // Get the record ID - make sure to use getInt for numeric IDs
            int recordId = activeRs.getInt("id");
            
            System.out.println("TEST: Active check-in found without checkout - Check-in: " + checkInDateTime + ", Record ID: " + recordId);
            
            // Calculate duration since check-in
            LocalDateTime checkInLocalDateTime = LocalDateTime.parse(checkInDateTime, dateTimeFormatter);
            Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);
            long minutesSinceLastCheckIn = duration.toMinutes();
            System.out.println("TEST: Minutes since last check-in: " + minutesSinceLastCheckIn);
            
            // For testing with 5-minute classes
            int minimumClassDuration = 5; // 5 minutes for testing
            
            // Use the session name from the database record
            if (sessionNameFromDb == null || sessionNameFromDb.isEmpty()) {
                sessionNameFromDb = sessionName; // Fallback to current session if none was recorded
            }
            
            // Check if attempting to checkout early
            if (minutesSinceLastCheckIn < minimumClassDuration) {
                // Early checkout case - show warning and don't mark attendance
                popUpHeader = "Early Checkout Warning";
                popUpMessage = "WARNING: Early departure detected!\n\n" +
                              "You need to complete at least " + minimumClassDuration + " minutes for attendance to be marked.\n" +
                              "Current duration: " + minutesSinceLastCheckIn + " minutes\n" +
                              "Time remaining: " + (minimumClassDuration - minutesSinceLastCheckIn) + " minutes\n\n" +
                              "Your attendance will NOT be marked for this session.";
                color = Color.RED;
                
                // Show warning popup but don't update database
                showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
                
                // Option: Allow them to force checkout but with no attendance
                int option = JOptionPane.showConfirmDialog(null, 
                    "Do you still want to checkout without getting attendance credit?", 
                    "Confirm Early Checkout", 
                    JOptionPane.YES_NO_OPTION);
                
                if (option == JOptionPane.YES_OPTION) {
                    // User confirmed early checkout - mark as invalid attendance
                    String updateQuery = "UPDATE userattendance SET checkout=?, workduration=?, attendance_status=? WHERE id=?";
                    PreparedStatement preparedStatement = con.prepareStatement(updateQuery);
                    preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
                    preparedStatement.setString(2, minutesSinceLastCheckIn + " Minutes");
                    preparedStatement.setString(3, "INVALID - Early Departure");  // Mark as invalid
                    preparedStatement.setInt(4, recordId);  // Use the ID from database
                    preparedStatement.executeUpdate();
                    
                    System.out.println("TEST: Early checkout recorded as INVALID attendance. Duration: " + minutesSinceLastCheckIn + " Minutes");
                    
                    popUpHeader = "Early Checkout Recorded";
                    popUpMessage = "You have checked out early.\nAttendance marked as INVALID for this session.\n" +
                                 "Subject: " + sessionNameFromDb + "\n" +
                                 "Duration: " + minutesSinceLastCheckIn + " minutes of " + minimumClassDuration + " required minutes";
                    color = Color.ORANGE;
                } else {
                    // User canceled early checkout
                    System.out.println("TEST: User canceled early checkout");
                    popUpHeader = "Checkout Canceled";
                    popUpMessage = "Checkout has been canceled.\nYour check-in is still active.\n" +
                                 "Please complete the full " + minimumClassDuration + " minutes for attendance credit.";
                    color = Color.BLUE;
                }
            } else {
                // Regular checkout with full attendance
                String updateQuery = "UPDATE userattendance SET checkout=?, workduration=?, attendance_status=? WHERE id=?";
                PreparedStatement preparedStatement = con.prepareStatement(updateQuery);
                preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
                preparedStatement.setString(2, minutesSinceLastCheckIn + " Minutes");
                preparedStatement.setString(3, "VALID");  // Mark as valid attendance
                preparedStatement.setInt(4, recordId);  // Use the ID from database
                preparedStatement.executeUpdate();
                
                System.out.println("TEST: Regular checkout recorded with VALID attendance. Duration: " + minutesSinceLastCheckIn + " Minutes");
                
                popUpHeader = "Checkout Complete";
                popUpMessage = "Successfully checked out!\n" +
                             "Attendance has been marked as VALID.\n" +
                             "Subject: " + sessionNameFromDb + "\n" +
                             "Duration: " + minutesSinceLastCheckIn + " minutes";
                color = Color.GREEN;
            }
        } else {
            // No active check-in, so allow a new check-in
            System.out.println("TEST: No active check-in found. Performing new check-in.");
            
            // Insert new record for check-in
            String insertQuery = "INSERT INTO userattendance (userid, date, checkin, session_name, attendance_status) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = con.prepareStatement(insertQuery);
            preparedStatement.setInt(1, Integer.valueOf(resultMap.get("id")));
            preparedStatement.setString(2, currentDate);
            preparedStatement.setString(3, currentDateTime.format(dateTimeFormatter));
            preparedStatement.setString(4, sessionName);
            preparedStatement.setString(5, "PENDING");  // Attendance is pending until checkout
            preparedStatement.executeUpdate();

            popUpHeader = "Check-In";
            popUpMessage = "Successfully checked in!\n" +
                         "Class: " + getClassPeriodLabel(currentDateTime) + "\n" +
                         "Subject: " + sessionName + "\n" +
                         "Note: You must complete " + 5 + " minutes for valid attendance";
            color = Color.GREEN;
            System.out.println("TEST: Successfully checked in for " + sessionName);
        }
    
        // Display the checkout/checkin popup with improved visibility
        lblCheckInCheckOut.setHorizontalAlignment(JLabel.CENTER);
        lblCheckInCheckOut.setText(popUpHeader);
        lblCheckInCheckOut.setForeground(color);
        lblCheckInCheckOut.setBackground(Color.DARK_GRAY);
        lblCheckInCheckOut.setOpaque(true);
        
        // IMPORTANT: Fix for checkout popup not being visible
        // Show popup using the dedicated method that ensures visibility
        showPopUpForCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
        
        System.out.println("TEST: Popup displayed with message: " + popUpMessage);
        System.out.println("TEST: Operation completed successfully: " + popUpHeader);
        return true;
    } catch (SQLException e) {
        System.out.println("Database error occurred: " + e.getMessage());
        e.printStackTrace();
        
        // Show error to user
        showPopUpForCertainDuration("An error occurred: " + e.getMessage(), 
                                    "Database Error", JOptionPane.ERROR_MESSAGE);
        return false;
    } finally {
        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                System.out.println("Error closing database connection: " + e.getMessage());
            }
        }
    }
}
 private String getSessionName(LocalDateTime dateTime) {
    try {
        if (dateTime == null) {
            System.out.println("ERROR: dateTime is null in getSessionName");
            return "Unknown Session";
        }
        
        int minute = dateTime.getMinute();
        
        // For testing: Use the minutes to determine the subject in a rotating fashion
        int timeBlock = (minute / 5) % 4;  // Will give values 0-3 in 5-minute blocks
        
        switch(timeBlock) {
            case 0:
                return "Database Management System";
            case 1:
                return "Software Engineering";
            case 2:
                return "Computer Graphics";
            case 3:
                return "Processor Architecture";
            default:
                return "Unknown Session";
        }
    } catch (Exception e) {
        System.out.println("ERROR in getSessionName: " + e.getMessage());
        e.printStackTrace();
        return "Unknown Session"; // Return a fallback value
    }
}
 private String getClassPeriodLabel(LocalDateTime currentTime) {
    try {
        // Check if currentTime is null
        if (currentTime == null) {
            System.out.println("ERROR: currentTime is null in getClassPeriodLabel");
            return "Unknown Period";
        }
        
        // For testing with 5-minute classes
        int hour = currentTime.getHour();
        int minute = currentTime.getMinute();
        
        // Calculate the current 5-minute block
        int currentBlock = minute / 5;
        int startMinute = currentBlock * 5;
        int endMinute = startMinute + 5;
        int endHour = hour;
        
        // Handle hour rollover
        if (endMinute >= 60) {
            endMinute = endMinute % 60;
            endHour = (hour + 1) % 24;
        }
        
        // Format the class period string
        return "Period " + (currentBlock + 1) + " (" + 
                String.format("%02d", hour) + ":" + String.format("%02d", startMinute) + " - " + 
                String.format("%02d", endHour) + ":" + String.format("%02d", endMinute) + ")";
    } catch (Exception e) {
        System.out.println("ERROR in getClassPeriodLabel: " + e.getMessage());
        e.printStackTrace();
        return "Period Error"; // Return a fallback value
    }
}

/**
 * Add this SQL script to add the attendance_status column if it doesn't exist:
 * 
 * ALTER TABLE userattendance ADD COLUMN attendance_status VARCHAR(20) DEFAULT 'PENDING';
 */
    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (imagee != null) {
            g.drawImage(imagee, 0, 0, null);
        }
    }
}